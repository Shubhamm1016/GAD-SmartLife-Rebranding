// source: provision.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.rainmaker.CmdSetUserMapping', null, global);
goog.exportSymbol('proto.rainmaker.RMakerConfigMsgType', null, global);
goog.exportSymbol('proto.rainmaker.RMakerConfigPayload', null, global);
goog.exportSymbol('proto.rainmaker.RMakerConfigPayload.PayloadCase', null, global);
goog.exportSymbol('proto.rainmaker.RMakerConfigStatus', null, global);
goog.exportSymbol('proto.rainmaker.RespSetUserMapping', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rainmaker.CmdSetUserMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rainmaker.CmdSetUserMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rainmaker.CmdSetUserMapping.displayName = 'proto.rainmaker.CmdSetUserMapping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rainmaker.RespSetUserMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rainmaker.RespSetUserMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rainmaker.RespSetUserMapping.displayName = 'proto.rainmaker.RespSetUserMapping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rainmaker.RMakerConfigPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rainmaker.RMakerConfigPayload.oneofGroups_);
};
goog.inherits(proto.rainmaker.RMakerConfigPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rainmaker.RMakerConfigPayload.displayName = 'proto.rainmaker.RMakerConfigPayload';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rainmaker.CmdSetUserMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.rainmaker.CmdSetUserMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rainmaker.CmdSetUserMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rainmaker.CmdSetUserMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secretkey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rainmaker.CmdSetUserMapping}
 */
proto.rainmaker.CmdSetUserMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rainmaker.CmdSetUserMapping;
  return proto.rainmaker.CmdSetUserMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rainmaker.CmdSetUserMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rainmaker.CmdSetUserMapping}
 */
proto.rainmaker.CmdSetUserMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rainmaker.CmdSetUserMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rainmaker.CmdSetUserMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rainmaker.CmdSetUserMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rainmaker.CmdSetUserMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecretkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string UserID = 1;
 * @return {string}
 */
proto.rainmaker.CmdSetUserMapping.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rainmaker.CmdSetUserMapping} returns this
 */
proto.rainmaker.CmdSetUserMapping.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string SecretKey = 2;
 * @return {string}
 */
proto.rainmaker.CmdSetUserMapping.prototype.getSecretkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rainmaker.CmdSetUserMapping} returns this
 */
proto.rainmaker.CmdSetUserMapping.prototype.setSecretkey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rainmaker.RespSetUserMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.rainmaker.RespSetUserMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rainmaker.RespSetUserMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rainmaker.RespSetUserMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rainmaker.RespSetUserMapping}
 */
proto.rainmaker.RespSetUserMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rainmaker.RespSetUserMapping;
  return proto.rainmaker.RespSetUserMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rainmaker.RespSetUserMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rainmaker.RespSetUserMapping}
 */
proto.rainmaker.RespSetUserMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rainmaker.RMakerConfigStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rainmaker.RespSetUserMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rainmaker.RespSetUserMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rainmaker.RespSetUserMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rainmaker.RespSetUserMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional RMakerConfigStatus Status = 1;
 * @return {!proto.rainmaker.RMakerConfigStatus}
 */
proto.rainmaker.RespSetUserMapping.prototype.getStatus = function() {
  return /** @type {!proto.rainmaker.RMakerConfigStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rainmaker.RMakerConfigStatus} value
 * @return {!proto.rainmaker.RespSetUserMapping} returns this
 */
proto.rainmaker.RespSetUserMapping.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string NodeId = 2;
 * @return {string}
 */
proto.rainmaker.RespSetUserMapping.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rainmaker.RespSetUserMapping} returns this
 */
proto.rainmaker.RespSetUserMapping.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rainmaker.RMakerConfigPayload.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.rainmaker.RMakerConfigPayload.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CMD_SET_USER_MAPPING: 10,
  RESP_SET_USER_MAPPING: 11
};

/**
 * @return {proto.rainmaker.RMakerConfigPayload.PayloadCase}
 */
proto.rainmaker.RMakerConfigPayload.prototype.getPayloadCase = function() {
  return /** @type {proto.rainmaker.RMakerConfigPayload.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.rainmaker.RMakerConfigPayload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rainmaker.RMakerConfigPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.rainmaker.RMakerConfigPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rainmaker.RMakerConfigPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rainmaker.RMakerConfigPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cmdSetUserMapping: (f = msg.getCmdSetUserMapping()) && proto.rainmaker.CmdSetUserMapping.toObject(includeInstance, f),
    respSetUserMapping: (f = msg.getRespSetUserMapping()) && proto.rainmaker.RespSetUserMapping.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rainmaker.RMakerConfigPayload}
 */
proto.rainmaker.RMakerConfigPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rainmaker.RMakerConfigPayload;
  return proto.rainmaker.RMakerConfigPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rainmaker.RMakerConfigPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rainmaker.RMakerConfigPayload}
 */
proto.rainmaker.RMakerConfigPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rainmaker.RMakerConfigMsgType} */ (reader.readEnum());
      msg.setMsg(value);
      break;
    case 10:
      var value = new proto.rainmaker.CmdSetUserMapping;
      reader.readMessage(value,proto.rainmaker.CmdSetUserMapping.deserializeBinaryFromReader);
      msg.setCmdSetUserMapping(value);
      break;
    case 11:
      var value = new proto.rainmaker.RespSetUserMapping;
      reader.readMessage(value,proto.rainmaker.RespSetUserMapping.deserializeBinaryFromReader);
      msg.setRespSetUserMapping(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rainmaker.RMakerConfigPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rainmaker.RMakerConfigPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rainmaker.RMakerConfigPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rainmaker.RMakerConfigPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCmdSetUserMapping();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.rainmaker.CmdSetUserMapping.serializeBinaryToWriter
    );
  }
  f = message.getRespSetUserMapping();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.rainmaker.RespSetUserMapping.serializeBinaryToWriter
    );
  }
};


/**
 * optional RMakerConfigMsgType msg = 1;
 * @return {!proto.rainmaker.RMakerConfigMsgType}
 */
proto.rainmaker.RMakerConfigPayload.prototype.getMsg = function() {
  return /** @type {!proto.rainmaker.RMakerConfigMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rainmaker.RMakerConfigMsgType} value
 * @return {!proto.rainmaker.RMakerConfigPayload} returns this
 */
proto.rainmaker.RMakerConfigPayload.prototype.setMsg = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CmdSetUserMapping cmd_set_user_mapping = 10;
 * @return {?proto.rainmaker.CmdSetUserMapping}
 */
proto.rainmaker.RMakerConfigPayload.prototype.getCmdSetUserMapping = function() {
  return /** @type{?proto.rainmaker.CmdSetUserMapping} */ (
    jspb.Message.getWrapperField(this, proto.rainmaker.CmdSetUserMapping, 10));
};


/**
 * @param {?proto.rainmaker.CmdSetUserMapping|undefined} value
 * @return {!proto.rainmaker.RMakerConfigPayload} returns this
*/
proto.rainmaker.RMakerConfigPayload.prototype.setCmdSetUserMapping = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.rainmaker.RMakerConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rainmaker.RMakerConfigPayload} returns this
 */
proto.rainmaker.RMakerConfigPayload.prototype.clearCmdSetUserMapping = function() {
  return this.setCmdSetUserMapping(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rainmaker.RMakerConfigPayload.prototype.hasCmdSetUserMapping = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RespSetUserMapping resp_set_user_mapping = 11;
 * @return {?proto.rainmaker.RespSetUserMapping}
 */
proto.rainmaker.RMakerConfigPayload.prototype.getRespSetUserMapping = function() {
  return /** @type{?proto.rainmaker.RespSetUserMapping} */ (
    jspb.Message.getWrapperField(this, proto.rainmaker.RespSetUserMapping, 11));
};


/**
 * @param {?proto.rainmaker.RespSetUserMapping|undefined} value
 * @return {!proto.rainmaker.RMakerConfigPayload} returns this
*/
proto.rainmaker.RMakerConfigPayload.prototype.setRespSetUserMapping = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.rainmaker.RMakerConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rainmaker.RMakerConfigPayload} returns this
 */
proto.rainmaker.RMakerConfigPayload.prototype.clearRespSetUserMapping = function() {
  return this.setRespSetUserMapping(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rainmaker.RMakerConfigPayload.prototype.hasRespSetUserMapping = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * @enum {number}
 */
proto.rainmaker.RMakerConfigStatus = {
  SUCCESS: 0,
  INVALIDPARAM: 1,
  INVALIDSTATE: 2
};

/**
 * @enum {number}
 */
proto.rainmaker.RMakerConfigMsgType = {
  TYPECMDSETUSERMAPPING: 0,
  TYPERESPSETUSERMAPPING: 1
};

goog.object.extend(exports, proto.rainmaker);
