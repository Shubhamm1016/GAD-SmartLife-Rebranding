# require_relative '../node_modules/react-native/scripts/react_native_pods'
# require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
# # $RNFirebaseAsStaticFramework = true
# permissions_path = '../node_modules/react-native-permissions/ios'
# pod 'Permission-Camera', :path => "#{permissions_path}/Camera/Permission-Camera.podspec"
# pod 'Permission-BluetoothPeripheral', :path => "#{permissions_path}/BluetoothPeripheral/Permission-BluetoothPeripheral.podspec"
# pod 'Permission-LocationWhenInUse', :path => "#{permissions_path}/LocationWhenInUse/Permission-LocationWhenInUse.podspec"
# pod 'Permission-LocationAlways', :path => "#{permissions_path}/LocationAlways/Permission-LocationAlways.podspec"
# pod 'RNCPushNotificationIOS', :path => '../node_modules/@react-native-community/push-notification-ios'
# platform :ios, '15.4'
# # platform :ios, min_ios_version_supported

# # use_frameworks! :linkage => :static
# install! 'cocoapods', :deterministic_uuids => false
# pod 'rn-fetch-blob', :path => '../node_modules/rn-fetch-blob'
# pod 'RNInAppBrowser', :path => '../node_modules/react-native-inappbrowser-reborn'
# pod 'ESPProvision'
# pod 'Protobuf'
# pod 'RNAppleAuthentication', :path => '../node_modules/@invertase/react-native-apple-authentication'
# pod 'RNPermissions', :path => '../node_modules/react-native-permissions'
# pod 'RNFBApp', :path => '../node_modules/@react-native-firebase/app'
# pod 'RNFBMessaging', :path => '../node_modules/@react-native-firebase/messaging'
# pod 'Firebase', :modular_headers => true
# pod 'FirebaseCoreInternal', :modular_headers => true
# pod 'GoogleUtilities', :modular_headers => true
# pod 'FirebaseCore', :modular_headers => true
# $RNFirebaseAsStaticFramework = true

# target 'godrejboyce' do
#   config = use_native_modules!
#   flags = get_default_flags()

#   use_react_native!(
#     :path => config[:reactNativePath],
#     :hermes_enabled => true,
#     :fabric_enabled => flags[:fabric_enabled],
#     :app_path => "#{Pod::Config.instance.installation_root}/.."
#   )

#   target 'godrejboyceTests' do
#     inherit! :complete
#   end

#   post_install do |installer|
#     react_native_post_install(
#       installer,
#       :mac_catalyst_enabled => false
#     )
    
#     __apply_Xcode_12_5_M1_post_install_workaround(installer)
    
#   end

#   def node_require(script)
#     require Pod::Executable.execute_command('node', ['-p',
#       "require.resolve(
#         '#{script}',
#         {paths: [process.argv[1]]},
#       )", __dir__]).strip
#   end
#   # Helper function to strip bitcode from frameworks
#   bitcode_strip_path = `xcrun --find bitcode_strip`.chop
#   def strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
#     framework_path = File.join(Dir.pwd, framework_relative_path)
#     command = "#{bitcode_strip_path} #{framework_path} -r -o #{framework_path}"
#     puts "Stripping bitcode: #{command}"
#     system(command)
#   end

#   # List of frameworks to strip bitcode from
#   framework_paths = [
#     "Pods/LogRocket/LogRocket.xcframework/ios-arm64/LogRocket.framework/LogRocket",
#     "Pods/hermes-engine/destroot/Library/Frameworks/macosx/hermes.framework/hermes",
#     "Pods/hermes-engine/destroot/Library/Frameworks/macosx/hermes.framework/Versions/Current/hermes",
#     "Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework/ios-arm64/hermes.framework/hermes",
#     "Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework/ios-arm64_x86_64-maccatalyst/hermes.framework/hermes"
#   ]

#   # Execute bitcode stripping
#   framework_paths.each do |framework_relative_path|
#     strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
#   end
 

# end


require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
# $RNFirebaseAsStaticFramework = true
permissions_path = '../node_modules/react-native-permissions/ios'
pod 'Permission-Camera', :path => "#{permissions_path}/Camera/Permission-Camera.podspec"
pod 'Permission-BluetoothPeripheral', :path => "#{permissions_path}/BluetoothPeripheral/Permission-BluetoothPeripheral.podspec"
pod 'Permission-LocationWhenInUse', :path => "#{permissions_path}/LocationWhenInUse/Permission-LocationWhenInUse.podspec"
pod 'Permission-LocationAlways', :path => "#{permissions_path}/LocationAlways/Permission-LocationAlways.podspec"
pod 'RNCPushNotificationIOS', :path => '../node_modules/@react-native-community/push-notification-ios'
platform :ios, '15.4'
# platform :ios, min_ios_version_supported
 
# use_frameworks! :linkage => :static
install! 'cocoapods', :deterministic_uuids => false
pod 'rn-fetch-blob', :path => '../node_modules/rn-fetch-blob'
pod 'RNInAppBrowser', :path => '../node_modules/react-native-inappbrowser-reborn'
pod 'ESPProvision'
pod 'Protobuf'
pod 'RNAppleAuthentication', :path => '../node_modules/@invertase/react-native-apple-authentication'
pod 'RNPermissions', :path => '../node_modules/react-native-permissions'
pod 'Firebase', :modular_headers => true
pod 'FirebaseCoreInternal', :modular_headers => true
pod 'GoogleUtilities', :modular_headers => true
pod 'FirebaseCore', :modular_headers => true
$RNFirebaseAsStaticFramework = true
 
target 'godrejboyce' do
  config = use_native_modules!
  flags = get_default_flags()
 
  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    :fabric_enabled => flags[:fabric_enabled],
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
 
  target 'godrejboyceTests' do
    inherit! :complete
  end
 
  post_install do |installer|
    react_native_post_install(
      installer,
      :mac_catalyst_enabled => false
    )
    
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
    
  end
 
  def node_require(script)
    require Pod::Executable.execute_command('node', ['-p',
      "require.resolve(
        '#{script}',
        {paths: [process.argv[1]]},
      )", __dir__]).strip
  end
  # Helper function to strip bitcode from frameworks
  bitcode_strip_path = `xcrun --find bitcode_strip`.chop
  def strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
    framework_path = File.join(Dir.pwd, framework_relative_path)
    command = "#{bitcode_strip_path} #{framework_path} -r -o #{framework_path}"
    puts "Stripping bitcode: #{command}"
    system(command)
  end
 
  # List of frameworks to strip bitcode from
  framework_paths = [
    "Pods/LogRocket/LogRocket.xcframework/ios-arm64/LogRocket.framework/LogRocket",
    "Pods/hermes-engine/destroot/Library/Frameworks/macosx/hermes.framework/hermes",
    "Pods/hermes-engine/destroot/Library/Frameworks/macosx/hermes.framework/Versions/Current/hermes",
    "Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework/ios-arm64/hermes.framework/hermes",
    "Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework/ios-arm64_x86_64-maccatalyst/hermes.framework/hermes"
  ]
 
  # Execute bitcode stripping
  framework_paths.each do |framework_relative_path|
    strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
  end
 
 
end